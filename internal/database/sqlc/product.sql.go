// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products(
    id, product_name, product_thumb, product_description,
    product_price, product_quantity, product_type, product_shop,
    product_attributes
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateProductParams struct {
	ID                 string
	ProductName        string
	ProductThumb       string
	ProductDescription sql.NullString
	ProductPrice       string
	ProductQuantity    int32
	ProductType        ProductsProductType
	ProductShop        string
	ProductAttributes  json.RawMessage
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.ProductName,
		arg.ProductThumb,
		arg.ProductDescription,
		arg.ProductPrice,
		arg.ProductQuantity,
		arg.ProductType,
		arg.ProductShop,
		arg.ProductAttributes,
	)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, product_name, product_thumb, product_description, product_price, product_quantity, product_type, product_shop, product_attributes, product_ratingaverage, product_variations, isdraft, ispublished, created_at, updated_at FROM products
WHERE id = ?
`

func (q *Queries) GetProductByID(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.ProductThumb,
		&i.ProductDescription,
		&i.ProductPrice,
		&i.ProductQuantity,
		&i.ProductType,
		&i.ProductShop,
		&i.ProductAttributes,
		&i.ProductRatingaverage,
		&i.ProductVariations,
		&i.Isdraft,
		&i.Ispublished,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
