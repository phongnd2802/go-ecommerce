// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: shop.sql

package database

import (
	"context"
)

const createShop = `-- name: CreateShop :exec
INSERT INTO shops (
    id,
    shop_name,
    email,
    password
) VALUES (
    ?, ?, ?, ?
)
`

type CreateShopParams struct {
	ID       string
	ShopName string
	Email    string
	Password string
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) error {
	_, err := q.db.ExecContext(ctx, createShop,
		arg.ID,
		arg.ShopName,
		arg.Email,
		arg.Password,
	)
	return err
}

const getShopByEmail = `-- name: GetShopByEmail :one
SELECT id, shop_name, email, password, is_active, created_at, updated_at FROM shops
WHERE email = ?
LIMIT 1
`

func (q *Queries) GetShopByEmail(ctx context.Context, email string) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopByEmail, email)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShopByID = `-- name: GetShopByID :one
SELECT id, shop_name, email, password, is_active, created_at, updated_at FROM shops
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetShopByID(ctx context.Context, id string) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShopByID, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.ShopName,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
