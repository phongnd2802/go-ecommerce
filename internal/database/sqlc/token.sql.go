// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: token.sql

package database

import (
	"context"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (
    id,
    public_key,
    refresh_token,
    shop_id
) VALUES (
    ?, ?, ?, ?
)
`

type CreateTokenParams struct {
	ID           string
	PublicKey    string
	RefreshToken string
	ShopID       string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, createToken,
		arg.ID,
		arg.PublicKey,
		arg.RefreshToken,
		arg.ShopID,
	)
	return err
}

const deleteTokenByID = `-- name: DeleteTokenByID :exec
DELETE FROM tokens WHERE id = ?
`

func (q *Queries) DeleteTokenByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTokenByID, id)
	return err
}

const getTokenByID = `-- name: GetTokenByID :one
SELECT id, public_key, refresh_token, refresh_token_used, shop_id FROM tokens
WHERE id = ?
`

func (q *Queries) GetTokenByID(ctx context.Context, id string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByID, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.RefreshToken,
		&i.RefreshTokenUsed,
		&i.ShopID,
	)
	return i, err
}

const getTokenByShopID = `-- name: GetTokenByShopID :one
SELECT id, public_key, refresh_token, refresh_token_used, shop_id FROM tokens
WHERE shop_id = ?
`

func (q *Queries) GetTokenByShopID(ctx context.Context, shopID string) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByShopID, shopID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.RefreshToken,
		&i.RefreshTokenUsed,
		&i.ShopID,
	)
	return i, err
}
