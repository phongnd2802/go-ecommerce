// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clothing.sql

package database

import (
	"context"
)

const createClothing = `-- name: CreateClothing :exec
INSERT INTO clothes (
    id, brand, size, material, product_shop
) VALUES (?, ?, ?, ?, ?)
`

type CreateClothingParams struct {
	ID          string
	Brand       string
	Size        string
	Material    string
	ProductShop string
}

func (q *Queries) CreateClothing(ctx context.Context, arg CreateClothingParams) error {
	_, err := q.db.ExecContext(ctx, createClothing,
		arg.ID,
		arg.Brand,
		arg.Size,
		arg.Material,
		arg.ProductShop,
	)
	return err
}

const getClothingByID = `-- name: GetClothingByID :one
SELECT id, brand, product_shop, created_at, updated_at, size, material FROM clothes
WHERE id = ?
`

func (q *Queries) GetClothingByID(ctx context.Context, id string) (Clothe, error) {
	row := q.db.QueryRowContext(ctx, getClothingByID, id)
	var i Clothe
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.ProductShop,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Size,
		&i.Material,
	)
	return i, err
}

const updateClothingByID = `-- name: UpdateClothingByID :exec
UPDATE clothes 
SET brand = ?,
    size = ?,
    material = ?
WHERE id = ?
`

type UpdateClothingByIDParams struct {
	Brand    string
	Size     string
	Material string
	ID       string
}

func (q *Queries) UpdateClothingByID(ctx context.Context, arg UpdateClothingByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateClothingByID,
		arg.Brand,
		arg.Size,
		arg.Material,
		arg.ID,
	)
	return err
}
